
set directory=~/.vim.swap.d/
set nocompatible

" Attempt to install vim-plug if it isn't already present.
" chezmoi should also take care of this, but just in case.
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source '~/.vimrc'
endif

call plug#begin('~/.vim/plugged')
Plug 'google/vim-maktaba'
Plug 'google/vim-glaive'
Plug 'google/vim-codefmt'
Plug 'google/vim-syncopate'
Plug 'ervandew/supertab'
Plug 'Valloric/YouCompleteMe'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'fatih/vim-go'
Plug 'vim-airline/vim-airline'
Plug 'bazelbuild/vim-bazel'
Plug 'scrooloose/syntastic'
" Plug 'christoomey/vim-tmux-navigator'
Plug 'edkolev/tmuxline.vim'
Plug 'tmux-plugins/vim-tmux'
Plug 'ojroques/vim-oscyank'
Plug 'ConradIrwin/vim-bracketed-paste'
" Plug 'moorereason/vim-markdownfmt'
call plug#end()
call maktaba#plugin#Detect()
call glaive#Install()

Glaive codefmt plugin[mappings] clang_format_style='google'

" Make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" Better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'

" Use simple separators.
let g:tmuxline_powerline_separators=0

" Always use a status line.
set laststatus=2
" Merge comments with join.
set formatoptions+=j
" Mouse!
set mouse=a

" tabs are wrong
set expandtab
set shiftwidth=2
set tabstop=2

let mapleader=","

" incremental search and highlighting
set incsearch
set hlsearch
set ignorecase
set smartcase

" use UTF-8 where possible
set encoding=utf-8

" map Ctrl+C to copy-via-OSC52 in visual mode
vmap <C-c> :OSCYank<CR>

" enable modeline support
set modeline

" set the default true color escape sequences if unset.
if &t_8f == ""
  let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
endif
if &t_8b == ""
  let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
endif
set termguicolors

" Restore all the things.
filetype plugin indent on
syntax enable

augroup autoformat
  autocmd!
  autocmd FileType bzl AutoFormatBuffer buildifier
  autocmd FileType python AutoFormatBuffer black
augroup END
